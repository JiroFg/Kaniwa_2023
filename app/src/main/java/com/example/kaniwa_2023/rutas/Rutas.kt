package com.example.kaniwa_2023.rutas

import android.content.Context
import android.widget.Toast
import androidx.core.content.ContextCompat
import com.example.kaniwa_2023.R
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.model.Dash
import com.google.android.gms.maps.model.Dot
import com.google.android.gms.maps.model.Gap
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.PolylineOptions
import com.google.android.gms.maps.model.RoundCap

class Rutas (){
    companion object {
        fun ATAZ(map: GoogleMap, context: Context) {
            val polylineOptions = PolylineOptions()
                .add(LatLng(19.513159, -96.875301)).add(LatLng(19.514231, -96.876293))
                .add(LatLng(19.514867, -96.877655)).add(LatLng(19.515570, -96.879629))
                .add(LatLng(19.515919, -96.879994)).add(LatLng(19.517322, -96.880932))
                .add(LatLng(19.517664, -96.881358)).add(LatLng(19.518573, -96.882722))
                .add(LatLng(19.518917, -96.883012)).add(LatLng(19.519913, -96.883790))
                .add(LatLng(19.520247, -96.884289)).add(LatLng(19.522476, -96.894258))
                .add(LatLng(19.524312, -96.896621)).add(LatLng(19.528484, -96.898686))
                .add(LatLng(19.529091, -96.899457)).add(LatLng(19.532111, -96.905057))
                .add(LatLng(19.532222, -96.905119)).add(LatLng(19.533087, -96.906741))
                .add(LatLng(19.533237, -96.906911)).add(LatLng(19.533716606735606, -96.9073637145511))
                .add(LatLng(19.534072399005154, -96.90756353912303)).add(LatLng(19.53403700940078, -96.90770837840937))
                .add(LatLng(19.533956118848486, -96.90787065205386)).add(LatLng(19.533731937823557, -96.9081209466737))
                .add(LatLng(19.533730041948, -96.90819135466118)).add(LatLng(19.533790709950953, -96.90833753505167))
                .add(LatLng(19.54335988617218, -96.92675977189103)).add(LatLng(19.543374708864892, -96.92695983914527))
                .add(LatLng(19.54331404446314, -96.92705505756476)).add(LatLng(19.54325085235174, -96.92716368702924))
                .add(LatLng(19.54313584264787, -96.92738362816768)).add(LatLng(19.543035998993457, -96.92741447357118))
                .add(LatLng(19.541266154099898, -96.92631659622768)).add(LatLng(19.54111449106751, -96.92624819989771))
                .add(LatLng(19.540799789823655, -96.92617443914985))
                .add(LatLng(19.540632, -96.926203)).add(LatLng(19.540554, -96.926232))
                .add(LatLng(19.540479, -96.926229)).add(LatLng(19.540391, -96.926171))
                .add(LatLng(19.540391, -96.926171)).add(LatLng(19.540355, -96.925914))
                .add(LatLng(19.540400, -96.925841)).add(LatLng(19.540487, -96.925792))
                .add(LatLng(19.540661, -96.925827)).add(LatLng(19.540992613164047, -96.9260052770552))
                .add(LatLng(19.541288, -96.926215)).add(LatLng(19.542585, -96.927003))
                .add(LatLng(19.543212, -96.927058)).add(LatLng(19.543271, -96.926937))
                .add(LatLng(19.543270999176876, -96.92678947870952)).add(LatLng(19.543205, -96.926640))
                .add(LatLng(19.535418, -96.911594)).add(LatLng(19.534450, -96.912290))
                .add(LatLng(19.534371, -96.912155)).add(LatLng(19.535286, -96.911455))
                .add(LatLng(19.535459, -96.911346)).add(LatLng(19.535980, -96.911013))
                .add(LatLng(19.536605, -96.910506)).add(LatLng(19.537113, -96.910160))
                .add(LatLng(19.538359, -96.909300)).add(LatLng(19.539387, -96.908537))
                .add(LatLng(19.539914, -96.908198)).add(LatLng(19.539944538309033, -96.90811333102408))
                .add(LatLng(19.53991748428516, -96.9080080708572)).add(LatLng(19.539803, -96.907909))
                .add(LatLng(19.539652, -96.907894)).add(LatLng(19.539344, -96.907907))
                .add(LatLng(19.538808, -96.907899)).add(LatLng(19.538381, -96.907982))
                .add(LatLng(19.534387, -96.908157)).add(LatLng(19.534192, -96.908136))
                .add(LatLng(19.534033, -96.908105)).add(LatLng(19.533777, -96.908022))
                .add(LatLng(19.533700, -96.907972)).add(LatLng(19.533404, -96.907726))
                .add(LatLng(19.533331, -96.907633)).add(LatLng(19.533088, -96.907114))
                .add(LatLng(19.532961, -96.906939)).add(LatLng(19.532747396045167, -96.90659970076227))
                .add(LatLng(19.532747396045167, -96.90659970076227)).add(LatLng(19.531855, -96.904816))
                .add(LatLng(19.531855, -96.904816)).add(LatLng(19.528950, -96.899542))
                .add(LatLng(19.528605, -96.899062)).add(LatLng(19.528009, -96.898590))
                .add(LatLng(19.526616, -96.897870)).add(LatLng(19.526014, -96.897629))
                .add(LatLng(19.525529, -96.897366)).add(LatLng(19.524659, -96.896910))
                .add(LatLng(19.524310, -96.896722)).add(LatLng(19.524017, -96.896478))
                .add(LatLng(19.523301, -96.895624)).add(LatLng(19.522952, -96.895144))
                .add(LatLng(19.522434, -96.894495)).add(LatLng(19.522262, -96.894146))
                .add(LatLng(19.521407, -96.889561)).add(LatLng(19.520944, -96.887580))
                .add(LatLng(19.520017, -96.884168)).add(LatLng(19.519840, -96.883900))
                .add(LatLng(19.519418, -96.883506)).add(LatLng(19.519350, -96.883464))
                .add(LatLng(19.518607, -96.882941)).add(LatLng(19.518263, -96.882512))
                .add(LatLng(19.518035, -96.882206)).add(LatLng(19.517641, -96.881498))
                .add(LatLng(19.517338, -96.881157)).add(LatLng(19.516587, -96.880586))
                .add(LatLng(19.515839, -96.880087)).add(LatLng(19.515566, -96.879805))
                .add(LatLng(19.515407, -96.879523)).add(LatLng(19.514631, -96.877257))
                .add(LatLng(19.514444, -96.876881)).add(LatLng(19.514136, -96.876457))
                .add(LatLng(19.513752, -96.876186)).add(LatLng(19.513535, -96.876093))
                .add(LatLng(19.513115, -96.875728)).add(LatLng(19.512718, -96.875296))
                .add(LatLng(19.512522, -96.874968))

                //.add(LatLng())
                .width(15f)
                .color(ContextCompat.getColor(context, R.color.ATAZ))
            val polyline = map.addPolyline(polylineOptions)
            val pattern = listOf(
                Dot(), Gap(10f), Dash(50f), Gap(10f)
            )

            polyline.pattern = pattern
            polyline.startCap = RoundCap()
            polyline.endCap = RoundCap()
            //polyline.endCap = CustomCap(BitmapDescriptorFactory.fromResource(R.drawable.dcp1))
            polyline.isClickable = true
            map.setOnPolylineClickListener {
                Toast.makeText(
                    context,
                    "Ruta: ATAZ",
                    Toast.LENGTH_SHORT
                ).show()
            }

        }
        fun VERDE(map: GoogleMap, context: Context){
            val polylineOptions = PolylineOptions()
                // ---------------------------------INICIO ----------------------------------
                .add(LatLng(19.513136084606344, -96.8752840279703)).add(LatLng(19.514222294151587, -96.87628336136737))
                .add(LatLng(19.51458908033525, -96.8768418483346)).add(LatLng(19.515472080702114, -96.87939287263661))
                .add(LatLng(19.515821883360854, -96.87991172504312)).add(LatLng(19.517255047503777, -96.88085574820558))
                .add(LatLng(19.51867461462202, -96.88279423843984)).add(LatLng(19.520070396937033, -96.88391841865753))
                //  --------------------------------- Plaza animas ---------------------------------
                .add(LatLng(19.5213966904402, -96.88869456138914)).add(LatLng(19.521691195468254, -96.88946230538409))
                .add(LatLng(19.522250671223546, -96.89244679312205)).add(LatLng(19.522180736861852, -96.89278481520007))
                .add(LatLng(19.522389602518388, -96.89402020639255)).add(LatLng(19.522672718811847, -96.89456737479256))
                .add(LatLng(19.524169097040634, -96.8964451208161)).add(LatLng(19.528388247965463, -96.89858288467235))
                .add(LatLng(19.52918478259609, -96.89958237131275)).add(LatLng(19.532102740583884, -96.90504682489242))
                .add(LatLng(19.532225726327052, -96.90510020930238)).add(LatLng(19.533505890547232, -96.90721779089746))
                .add(LatLng(19.534467404631183, -96.90767452422652)).add(LatLng(19.53495933985916, -96.90782281426165))
                .add(LatLng(19.53825750315446, -96.90771011382864))
                //  --------------------------------- Plaza cristal ---------------------------------
                .add(LatLng(19.538749426830993, -96.90776349824019))
                .add(LatLng(19.538884969081586, -96.90780788000917)).add(LatLng(19.54077953073802, -96.90781124895354))
                .add(LatLng(19.54743147458774, -96.91097872380028)).add(LatLng(19.55462593908803, -96.91442827957627))
                .add(LatLng(19.55591100161817, -96.9149846787084)).add(LatLng(19.557408514900402, -96.91615929909233))
                .add(LatLng(19.5581358525562, -96.91717846007394)).add(LatLng(19.558451115312128, -96.91800760384422))
                .add(LatLng(19.561775234962955, -96.926663657928)).add(LatLng(19.563067093866803, -96.92797283243584))
                //  --------------------------------- Vuelta a Av. Xalapa ---------------------------------
                .add(LatLng(19.563555667976892, -96.92822863697282)).add(LatLng(19.56372247361943, -96.92854067417305))
                .add(LatLng(19.563561004753595, -96.92874970112166))
                .add(LatLng(19.562867222289597, -96.92874970118135)).add(LatLng(19.56196157551861, -96.93153606317603))
                .add(LatLng(19.561435629158236, -96.93192074284663)).add(LatLng(19.55884140913228, -96.93173217436163))
                .add(LatLng(19.550618630699674, -96.93566224061706)).add(LatLng(19.547704376985596, -96.93542841569933))
                .add(LatLng(19.54453417785104, -96.93387461147532)).add(LatLng(19.543112543699014, -96.93420649198146))
                .add(LatLng(19.54182595392848, -96.93388215422168)).add(LatLng(19.540481235914957, -96.932036844392))
                .add(LatLng(19.53778452673213, -96.93166881472104)).add(LatLng(19.536947803567543, -96.9318798591042))
                .add(LatLng(19.53634960720885, -96.93269306758103)).add(LatLng(19.535611464542164, -96.9368237060168))
                .add(LatLng(19.536086708316944, -96.93882999643053)).add(LatLng(19.53564181542483, -96.93955955724965))
                .add(LatLng(19.534650913214417, -96.93957028608523)).add(LatLng(19.531915040958214, -96.93557512779778))
                .add(LatLng(19.530591415913708, -96.93524909767703)).add(LatLng(19.528984142356766, -96.9351237014696))
                .add(LatLng(19.528464138646015, -96.93472243363392)).add(LatLng(19.5255568145245, -96.93414561116582))
                .add(LatLng(19.52483588459447, -96.9327035549955)).add(LatLng(19.524451629411555, -96.93276797719159))
                .add(LatLng(19.524239279025153, -96.93236028143973)).add(LatLng(19.520198214950423, -96.93508398852113))
                .add(LatLng(19.519611674126473, -96.93494452931574)).add(LatLng(19.518286967907645, -96.93383945908205))
                .add(LatLng(19.516547642561857, -96.93332447497441)).add(LatLng(19.513215010657056, -96.92991115146134))
                .add(LatLng(19.509938488649333, -96.92944981149772)).add(LatLng(19.509271040858092, -96.92973949005825))
                .add(LatLng(19.50877545059194, -96.93014719993035))
                // ---------------------------------INICIO CTO. PRESIDENTES----------------------------------
                .add(LatLng(19.508269804942294, -96.92985752136981))
                .add(LatLng(19.508415368711425, -96.92861011787028)).add(LatLng(19.509933463247837, -96.9266640245168))
                .add(LatLng(19.51113000689539, -96.92561268674918)).add(LatLng(19.511446272464458, -96.92467878566576))
                .add(LatLng(19.513286788231714, -96.91912126715134))
                // ----------------------------------INICIO DE REBSAMEN----------------------------------
                .add(LatLng(19.519138053001114, -96.91500130947836))
                .add(LatLng(19.516155014682745, -96.91182876552001)).add(LatLng(19.5145484748193, -96.90984583326139))
                .add(LatLng(19.512086028175183, -96.90587374604644))
                // ----------------------------------XALAPA 2000 ----------------------------------
                .add(LatLng(19.513160844219207, -96.9050096607103)).add(LatLng(19.513254963498394, -96.90484739720252))
                .add(LatLng(19.513360847621993, -96.90430443854183)).add(LatLng(19.513131431933214, -96.9040423205677))
                .add(LatLng(19.512643187204294, -96.90403607966356)).add(LatLng(19.512490242769072, -96.90394870700551))
                .add(LatLng(19.51235494564809, -96.903755238977)).add(LatLng(19.512266708334284, -96.90351808461945))
                .add(LatLng(19.512207883416856, -96.90331213468217)).add(LatLng(19.512260825830182, -96.90285030777537))
                .add(LatLng(19.51250789019649, -96.90258818980124)).add(LatLng(19.512878486038094, -96.9022823854981))
                .add(LatLng(19.513037312567313, -96.90202026752397)).add(LatLng(19.513384377403007, -96.90138993620523))
                .add(LatLng(19.513443201877603, -96.90110285461452)).add(LatLng(19.51337261250553, -96.90075336398236))
                .add(LatLng(19.51314907929065, -96.9006223049953)).add(LatLng(19.51308437224972, -96.90059734137871))
                .add(LatLng(19.512902015904118, -96.90065975042017)).add(LatLng(19.51279024901, -96.90075336398236))
                .add(LatLng(19.512478477791724, -96.90112157732696)).add(LatLng(19.512207883416856, -96.90132752716377))
                .add(LatLng(19.512131411011453, -96.90138993620523)).add(LatLng(19.51083137456139, -96.90176439036469))
                .add(LatLng(19.51067254585997, -96.9017519085564)).add(LatLng(19.509672509723348, -96.90135873158452))
                .add(LatLng(19.50956074059694, -96.9012463953099)).add(LatLng(19.508726777400113, -96.90027048920513))
                .add(LatLng(19.508332452556942, -96.90040188030362)).add(LatLng(19.508246443024557, -96.90058057386122))
                .add(LatLng(19.508752917525218, -96.90161605270156)).add(LatLng(19.508876077089255, -96.90199428127445))
                .add(LatLng(19.50866216831275, -96.90210337271418))
                // ---------------------------------- INICIO ARCO SUR ----------------------------------
                .add(LatLng(19.50828843665065, -96.90164121219432)).add(LatLng(19.50783647545265, -96.9008996109273))
                .add(LatLng(19.507134650098468, -96.89979659733628)).add(LatLng(19.506512699387784, -96.89900802784933))
                .add(LatLng(19.505344639154593, -96.89548360519687)).add(LatLng(19.505157546466357, -96.89380990671157))
                .add(LatLng(19.50531935636989, -96.89253317518995)).add(LatLng(19.505587353655493, -96.89135300325229))
                // ---------------------------------- COBAEV ----------------------------------
                .add(LatLng(19.50537497848042, -96.89120279946222)).add(LatLng(19.504879435330498, -96.89127253689492))
                .add(LatLng(19.504662002652847, -96.89114379086536)).add(LatLng(19.504606380293023, -96.89080046811983))
                .add(LatLng(19.504520418426566, -96.8905697981502)).add(LatLng(19.504742884887975, -96.89050006370678))
                .add(LatLng(19.50471760201269, -96.89080583552067)).add(LatLng(19.504752998036984, -96.89110087849899))
                .add(LatLng(19.504844016349654, -96.89121353127253)).add(LatLng(19.50513729723094, -96.89119743801918))
                .add(LatLng(19.505536763380732, -96.89106329066674)).add(LatLng(19.505744081791576, -96.8906448660793))
                .add(LatLng(19.506608748423933, -96.88591344930742)).add(LatLng(19.507518759594067, -96.8803468912933))
                .add(LatLng(19.507372121378996, -96.879949924377)).add(LatLng(19.507011522042628, -96.87955971580752))
                // ---------------------------------- ENTRADA FASTI PARA EL TEC ----------------------------------
                .add(LatLng(19.506434217810202, -96.87895704859858)).add(LatLng(19.50458884453314, -96.87887886275308))
                .add(LatLng(19.50426494099491, -96.87877592878232)).add(LatLng(19.503465997864357, -96.87814829190116))
                .add(LatLng(19.50324350666987, -96.87810001214106)).add(LatLng(19.50223989316678, -96.878401103783))
                // ---------------------------------- TEC ----------------------------------
                .add(LatLng(19.50149803393151, -96.87893743616513)).add(LatLng(19.50134848613642, -96.8789668182557))
                .add(LatLng(19.501042853492976, -96.8792099925408)).add(LatLng(19.50070887345569, -96.8796462473165))
                .add(LatLng(19.50061279610628, -96.88010758727941)).add(LatLng(19.500693703346208, -96.88075131741395))
                .add(LatLng(19.500627958321093, -96.88113753919221)).add(LatLng(19.50044591690038, -96.8816149723753))
                .add(LatLng(19.50031947767668, -96.88169546737828)).add(LatLng(19.500198134294713, -96.88161503484464))
                .add(LatLng(19.50025881488396, -96.88144873789322)).add(LatLng(19.500557160790457, -96.88112687276275))
                .add(LatLng(19.500627954654462, -96.88075136349558)).add(LatLng(19.50050153702291, -96.88020419288121))
                .add(LatLng(19.500590531347385, -96.87971386173531)).add(LatLng(19.500954586979475, -96.87921009029525))
                .add(LatLng(19.501005813299727, -96.87917464847509)).add(LatLng(19.501032766599227, -96.87921338812635))
                .add(LatLng(19.501224047954736, -96.8790409044322)).add(LatLng(19.501377072872916, -96.8789560461485))
                .add(LatLng(19.501484885800455, -96.87894313292824)).add(LatLng(19.502259456731924, -96.87837904437441))
                .add(LatLng(19.503233988713912, -96.87808172538557)).add(LatLng(19.50346192468053, -96.87811517709625))
                .add(LatLng(19.50425500525564, -96.87871521575893)).add(LatLng(19.504491454810076, -96.8788319221883))
                .add(LatLng(19.504591400678386, -96.87886143580985)).add(LatLng(19.506422195501692, -96.87894385669287))
                .add(LatLng(19.50629855343527, -96.87878187519611)).add(LatLng(19.506071009603804, -96.87821324691063))
                .add(LatLng(19.506167083705016, -96.87780018674097)).add(LatLng(19.506652509890483, -96.87683459141958))
                .add(LatLng(19.507992480805502, -96.87557931765726)).add(LatLng(19.508607172828846, -96.8734776463359))
                .add(LatLng(19.508369373223154, -96.87199663491417)).add(LatLng(19.5070529642413, -96.86812885957696))
                .add(LatLng(19.50663140880161, -96.86435878791168)).add(LatLng(19.5067173695427, -96.86320007354873))
                .add(LatLng(19.507241893756706, -96.86229148514661)).add(LatLng(19.507904293462214, -96.85865440973424))
                // ---------------------------------- Vuelta abajo del puente de carretera Xal - Ver ----------------------------------
                .add(LatLng(19.507696979800357, -96.85624577743955)).add(LatLng(19.50773743165523, -96.85604729394073))
                .add(LatLng(19.508207683708857, -96.85597219209168)).add(LatLng(19.508263304829065, -96.85792381348493))
                .add(LatLng(19.508152062569504, -96.85812766136087)).add(LatLng(19.508157119037513, -96.858326144819))
                .add(LatLng(19.5073177059335, -96.8628644017223)).add(LatLng(19.50731494961429, -96.86390392292532))
                .add(LatLng(19.50863475021943, -96.86870455414186)).add(LatLng(19.510705792245265, -96.87253856194528))
                .add(LatLng(19.512216129689907, -96.8743919763844)).add(LatLng(19.513136084606344, -96.8752840279703))
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())

                .width(15f)
                .color(ContextCompat.getColor(context, R.color.InterbusVerde))
                val polyline = map.addPolyline(polylineOptions)
                val pattern = listOf(
                    Dot(), Gap(10f), Dash(50f), Gap(10f)
                )
            polyline.pattern = pattern
            polyline.startCap = RoundCap()
            polyline.endCap = RoundCap()
            //polyline.endCap = CustomCap(BitmapDescriptorFactory.fromResource(R.drawable.dcp1))
            polyline.isClickable = true
            map.setOnPolylineClickListener {
                Toast.makeText(
                    context,
                    "Ruta: VERDE",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
        /*fun VERDERegreso(map: GoogleMap, context: Context){
            val polylineOptions = PolylineOptions()

                // ---------------------------------INICIO ----------------------------------
                .add(LatLng(19.51300171103903, -96.875401798026)).add(LatLng(19.511324824227568, -96.87388908127389))
                // ---------------------------------Vuelta hacia arco sur ----------------------------------
                .add(LatLng(19.5106402007927, -96.8728258752682)).add(LatLng(19.51014668018521, -96.8727002150306))
                .add(LatLng(19.509236479477615, -96.87296438614631)).add(LatLng(19.508751077038955, -96.87347402080167))
                .add(LatLng(19.50826060068996, -96.87534620271053)).add(LatLng(19.508048229033587, -96.87574316962682))
                .add(LatLng(19.506632363598197, -96.877030664494)).add(LatLng(19.50621772878791, -96.878243022914))
                .add(LatLng(19.507552646818322, -96.88009911146855))

                // --------------------------------- Walmart Arco Sur ----------------------------------
                .add(LatLng(19.507639101714265, -96.88093276824512)).add(LatLng(19.505778179237392, -96.89123051542788))
                .add(LatLng(19.50570234729719, -96.89155773059646)).add(LatLng(19.505301887930656, -96.89412092183093))
                .add(LatLng(19.50551325318503, -96.89561940897272)).add(LatLng(19.506640905734194, -96.89870930505775))
                .add(LatLng(19.507012559194717, -96.89917600942299))

                // --------------------------------- Uv Psicologia ----------------------------------
                .add(LatLng(19.507927783782478, -96.89986265492273)).add(LatLng(19.50889680799275, -96.90199918482479))
                .add(LatLng(19.508987778762652, -96.90243085371041))
//                .add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())
//                .add(LatLng()).add(LatLng())

                .width(15f)
                .color(ContextCompat.getColor(context, R.color.InterbusVerde))
            val polyline = map.addPolyline(polylineOptions)
//            val pattern = listOf(
//                Dot(), Gap(10f), Dash(50f), Gap(10f)
//            )
//            polyline.pattern = pattern
            polyline.startCap = RoundCap()
            polyline.endCap = RoundCap()
            //polyline.endCap = CustomCap(BitmapDescriptorFactory.fromResource(R.drawable.dcp1))
            polyline.isClickable = true
            map.setOnPolylineClickListener {
                Toast.makeText(
                    context,
                    "Ruta: VERDE - Regreso",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }*/
    }
}